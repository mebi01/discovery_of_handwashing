knitr::opts_chunk$set(echo = TRUE)
summary(cars)
load("C:/Users/mahdiebn/Desktop/Mixed_model_tutorials/dragons.RData")
View(dragons)
head(dradragons)
head(dragons)
hist(dragons$testScore)
hist(scale(dragons$testScore))
a= hist(dragons$testScore)
b= hist(scale(dragons$testScore))
plot(a,b)
a
b
a
hist(dragons$testScore)
hist(dragons$bodyLength)
hist(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
hist(scale(dragons$bodyLength))
dragons$bodYLenghth2 <- dragons$do
dragons$bodYLenghth2 <- scale(dragons$bodyLength)
dragons$bodYLenghth2 <- scale(dragons$bodyLength,  conda install -c r r-irkernel
)
dragons$bodYLenghth2 <- scale(dragons$bodyLength,  center = TRUE, scale = TRUE)
)
dragons$bodYLenghth2 <- scale(dragons$bodyLength,  center = TRUE, scale = TRUE)
hist(dragons$bodYLenghth2)
library("tidyverse")
lm_basic <- lm(testScore~ bodYLenght2, data= dragons)
lm_basic <- lm(testScore~ bodYLenght2, data= dragons)
dragons$bodylenght2 <- scale(dragons$bodyLength,  center = TRUE, scale = TRUE)
lm_basic <- lm(testScore~ bodylenght2, data= dragons)
View(lm_basic)
summary(lm_basic)
library(ggplot2)
View(lm_basic)
lm_basic_plot <-ggplot(testScore, bodylenght2, data= dragons)%>% geom_point()
lm_basic_plot <-ggplot(dragons, aes(testScore, bodylenght2))%>% geom_point()
lm_basic_plot <-ggplot(dragons, aes(testScore, bodylenght2)) + geom_point()
(lm_basic_plot <-ggplot(dragons, aes(testScore, bodylenght2)) + geom_point())
(lm_basic_plot <-ggplot(dragons, aes(testScore, bodylenght2)) + geom_point()+ geom_smooth(method = "lm"))
write.csv(dragons, "dragons.csv")
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)      # Repel overlapping text labels in plots
library(rvest)        # scraping data
install.packages("rvest")
library(rvest)        # scraping data
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
install.packages("rvest")
install.packages("tidyr")
install.packages("dplyr")
install.packages("tibble")
install.packages("magrittr")
install.packages("DT")
install.packages("ggplot2")
install.packages("ggrepel")
install.packages("rvest")
install.packages("tidyr")
install.packages("dplyr")
install.packages("magrittr")
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)      # Repel overlapping text labels in plots
install.packages("rvest")
install.packages("tidyr")
install.packages("dplyr")
install.packages("magrittr")
install.packages("magrittr")
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)      # Repel overlapping text labels in plots
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)      # Repel overlapping text labels in plots
url_pci <- read_html("http://www.bea.gov/iTable/iTableHtml.cfm?reqid=70&step=30&isuri=1&7022=21&7023=0&7024=non-industry&7033=-1&7025=0&7026=00000,01000,02000,04000,05000,06000,08000,09000,10000,11000,12000,13000,15000,16000,17000,18000,19000,20000,21000,22000,23000,24000,25000,26000,27000,28000,29000,30000,31000,32000,33000,34000,35000,36000,37000,38000,39000,40000,41000,42000,44000,45000,46000,47000,48000,49000,50000,51000,53000,54000,55000,56000&7027=-1&7001=421&7028=53&7031=0&7040=-1&7083=levels&7029=23&7090=70")
url_pci
pci_raw <- url_pci %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE) %>%
.[[1]]
url_pce <- read_html("http://www.bea.gov/iTable/iTableHtml.cfm?reqid=70&step=10&isuri=1&7003=2&7035=-1&7004=x&7005=1&7006=00000,01000,02000,04000,05000,06000,08000,09000,10000,11000,12000,13000,15000,16000,17000,18000,19000,20000,21000,22000,23000,24000,25000,26000,27000,28000,29000,30000,31000,32000,33000,34000,35000,36000,37000,38000,39000,40000,41000,42000,44000,45000,46000,47000,48000,49000,50000,51000,53000,54000,55000,56000&7036=-1&7001=62&7002=6&7090=70&7007=-1&7093=levels")
# download PCE table and extract the data frame from the list
pce_raw <- url_pce %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE) %>%
.[[1]]
pce_raw
pce_raw <- url_pce %>%
html_nodes("table") %>%
.[2] %>%
html_table(fill = TRUE) %>%
.[[1]]
sc_key("JV4KLNjlODA8KU5ZDCNWDOCq6kLMuUcklZZO045s")
## Create function to be used for extracting demographical data ##
scorecard_data <- function(year) {
sc_init() %>%
sc_filter(main == 1) %>%
sc_select(instnm, city, stabbr, zip,longitude, latitude,
ugds, ugds_white, ugds_black, ugds_hisp, ugds_asian, ugds_aian,
ugds_nhpi, ugds_2mor, ugds_nra, ugds_unkn, ugds_whitenh, ugds_blacknh,
ugds_api, UGDS_AIANOld, UGDS_HISPOld) %>%
sc_year(year) %>%
sc_get()
}
raw_data <- vector("list", length(years))
for (i in seq_along(years)) {
raw_data[[i]] <- scorecard_data(years[i])
}
raw_data <- bind_rows(raw_data)
sc_key("JV4KLNjlODA8KU5ZDCNWDOCq6kLMuUcklZZO045s")
## Create function to be used for extracting demographical data ##
scorecard_data <- function(year) {
sc_init() %>%
sc_filter(main == 1) %>%
sc_select(instnm, city, stabbr, zip,longitude, latitude,
ugds, ugds_white, ugds_black, ugds_hisp, ugds_asian, ugds_aian,
ugds_nhpi, ugds_2mor, ugds_nra, ugds_unkn, ugds_whitenh, ugds_blacknh,
ugds_api, UGDS_AIANOld, UGDS_HISPOld) %>%
sc_year(year) %>%
sc_get()
}
ears <- c(2004:2013)
raw_data <- vector("list", length(years))
for (i in seq_along(years)) {
raw_data[[i]] <- scorecard_data(years[i])
}
raw_data <- bind_rows(raw_data)
years <- c(2004:2013)
raw_data <- vector("list", length(years))
for (i in seq_along(years)) {
raw_data[[i]] <- scorecard_data(years[i])
}
raw_data <- bind_rows(raw_data)
raw_data <- bind_rows(raw_data)
geo_ref <- data.frame(stabbr = state.abb,
stabbr_long = state.center$y,
stabbr_lat = state.center$x,
region= tolower(state.name))
geo_ref
clean_data <- raw_data %>%
mutate(ugds_white_new = ugds_white + ugds_whitenh,
ugds_black_new = ugds_black + ugds_blacknh,
ugds_hisp_new = ugds_hisp + ugds_hispold,
ugds_asian_new = ugds_asian + ugds_api,
ugds_aian_new = ugds_aian + ugds_aianold) %>%
select(-ugds_white, -ugds_whitenh, -ugds_black, -ugds_blacknh,
-ugds_hisp, -ugds_hispold, -ugds_asian, -ugds_api,
-ugds_aian, -ugds_aianold)
library("dplyr")
## Clean data to consolidate demographical data categories ##
clean_data <- raw_data %>%
mutate(ugds_white_new = ugds_white + ugds_whitenh,
ugds_black_new = ugds_black + ugds_blacknh,
ugds_hisp_new = ugds_hisp + ugds_hispold,
ugds_asian_new = ugds_asian + ugds_api,
ugds_aian_new = ugds_aian + ugds_aianold) %>%
select(-ugds_white, -ugds_whitenh, -ugds_black, -ugds_blacknh,
-ugds_hisp, -ugds_hispold, -ugds_asian, -ugds_api,
-ugds_aian, -ugds_aianold)
library("dplyr")
install.packages("dplyr", dependencies = T)
library("dplyr")
version()
install.packages("rlang")
install.packages("rlang")
library("dplyr")
remotes::update_packages("rlang")
install.packages("remote")
library()
library("remote")
remotes::update_packages("rlang"
)
remove::update_packages("rlang
")
remote::update_packages("rlang
")
install.packages("remotes")
library("remotes")
library("remotes")
remotes::update_packages("rlang")
library("dplyr")
remotes::update_packages("rlang")
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)      # Repel overlapping text labels in plots
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)      # Repel overlapping text labels in plots
library("ggplot2")
install.packages("rvest")
install.packages("tidyr")
install.packages("dplyr")
install.packages("tibble")
install.packages("magrittr")
install.packages("DT")
install.packages("ggplot2")
install.packages("ggrepel")
install.packages("rvest")
install.packages("magrittr")
install.packages("rvest")
install.packages("magrittr")
library("ggplot2")
library(rvest)        # scraping data
library(tidyr)        # creating tidy data
library(dplyr)        # transforming (joining, summarizing, etc.) data
library(tibble)       # coercing data to tibbles
library(magrittr)     # for piping capabilities
library(DT)           # for printing nice HTML output tables
library(ggplot2)      # visualizing data
library(ggrepel)
sc_key("JV4KLNjlODA8KU5ZDCNWDOCq6kLMuUcklZZO045s")
## Create function to be used for extracting demographical data ##
scorecard_data <- function(year) {
sc_init() %>%
sc_filter(main == 1) %>%
sc_select(instnm, city, stabbr, zip,longitude, latitude,
ugds, ugds_white, ugds_black, ugds_hisp, ugds_asian, ugds_aian,
ugds_nhpi, ugds_2mor, ugds_nra, ugds_unkn, ugds_whitenh, ugds_blacknh,
ugds_api, UGDS_AIANOld, UGDS_HISPOld) %>%
sc_year(year) %>%
sc_get()
}
years <- c(2004:2013)
raw_data <- vector("list", length(years))
for (i in seq_along(years)) {
raw_data[[i]] <- scorecard_data(years[i])
}
raw_data <- bind_rows(raw_data)
geo_ref <- data.frame(stabbr = state.abb,
stabbr_long = state.center$y,
stabbr_lat = state.center$x,
region= tolower(state.name))
geo_ref
raw_data[is.na(raw_data)] <- 0
install.packages("dplyr", dependencies = T)
library("dplyr")
## Clean data to consolidate demographical data categories ##
clean_data <- raw_data %>%
mutate(ugds_white_new = ugds_white + ugds_whitenh,
ugds_black_new = ugds_black + ugds_blacknh,
ugds_hisp_new = ugds_hisp + ugds_hispold,
ugds_asian_new = ugds_asian + ugds_api,
ugds_aian_new = ugds_aian + ugds_aianold) %>%
select(-ugds_white, -ugds_whitenh, -ugds_black, -ugds_blacknh,
-ugds_hisp, -ugds_hispold, -ugds_asian, -ugds_api,
-ugds_aian, -ugds_aianold)
version(i)
install.packages("dplyr", dependencies = T)
clean_data <- raw_data %>%
mutate(ugds_white_new = ugds_white + ugds_whitenh,
ugds_black_new = ugds_black + ugds_blacknh,
ugds_hisp_new = ugds_hisp + ugds_hispold,
ugds_asian_new = ugds_asian + ugds_api,
ugds_aian_new = ugds_aian + ugds_aianold) %>%
select(-ugds_white, -ugds_whitenh, -ugds_black, -ugds_blacknh,
-ugds_hisp, -ugds_hispold, -ugds_asian, -ugds_api,
-ugds_aian, -ugds_aianold)
datatable(clean_data, caption = "Table 1: Tidy Data Set")
raw_data <- bind_rows(raw_data)
raw_data[is.na(raw_data)] <- 0
head(raw_data)
View(lm_basic_plot)
View(raw_data)
getwd()
setwd("C:/Users/mahdiebn/Google Drive/mycodes_dec/datacamp/discovery_handwashing")
library(tidyverse)
library(ggplot2)
library(dplyr)
yearly<- read.csv("yearly_deaths_by_clinic.csv")
print(yearly)
yearly$rate<- yearly$deaths/yearly$births
head(yearly)
yearly %>% ggplot(aes(clinic, rate))+ geom_boxplot()
yearly %>% ggplot()+ geom_bar (aes(clinic, rate))
yearly %>% ggplot(aes(year, rate))
yearly %>% ggplot(aes(year, rate))+ geom_line()
yearly %>% ggplot(aes(year, rate, col= clinic))+ geom_line()
yearly %>% ggplot(aes(year, rate, col= clinic))+
geom_line()+
theme_dark()
yearly %>% ggplot(aes(year, rate, col= clinic))+
geom_line()+
theme_linedraw()
yearly %>% ggplot(aes(year, rate, col= clinic))+
geom_line()+
theme_void()
yearly %>% ggplot(aes(year, rate, col= clinic))+
geom_line()+
theme_minimal()
montly <- read.csv("monthly_deaths.csv")
head(montly)
montly %>% mutate(rate= deaths/births)
View(montly)
monthly <- read.csv("monthly_deaths.csv")
head(monthly)
monthly %>% mutate(rate= deaths/births)
head(montly
head(montly)
head(monthly
head(monthly)
monthly %>% mutate(rate= deaths/births)
head(monthly)
monthly$rate <- monthly %>% mutate(rate= deaths/births)
head(monthly)
monthly <- read.csv("monthly_deaths.csv")
head(monthly)
monthly$rate <- monthly %>% mutate(rate= deaths/births)
head(monthly)
monthly <- monthly %>% mutate(rate= deaths/births)
head(monthly)
